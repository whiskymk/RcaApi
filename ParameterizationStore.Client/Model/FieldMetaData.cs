/* 
 * ParameterizationStore
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ParameterizationStore.Client.Client.SwaggerDateConverter;

namespace ParameterizationStore.Client.Model
{
    /// <summary>
    /// FieldMetaData
    /// </summary>
    [DataContract]
        public partial class FieldMetaData :  IEquatable<FieldMetaData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldMetaData" /> class.
        /// </summary>
        /// <param name="dataType">dataType.</param>
        /// <param name="fieldName">fieldName.</param>
        /// <param name="fieldGroup">fieldGroup.</param>
        /// <param name="fieldOrder">fieldOrder.</param>
        /// <param name="fieldLabel">fieldLabel.</param>
        /// <param name="tags">tags.</param>
        /// <param name="description">description.</param>
        /// <param name="validators">validators.</param>
        /// <param name="refValuesCode">refValuesCode.</param>
        public FieldMetaData(DataTypeEnum dataType = default(DataTypeEnum), string fieldName = default(string), string fieldGroup = default(string), string fieldOrder = default(string), string fieldLabel = default(string), List<string> tags = default(List<string>), string description = default(string), List<FieldValidator> validators = default(List<FieldValidator>), string refValuesCode = default(string))
        {
            this.DataType = dataType;
            this.FieldName = fieldName;
            this.FieldGroup = fieldGroup;
            this.FieldOrder = fieldOrder;
            this.FieldLabel = fieldLabel;
            this.Tags = tags;
            this.Description = description;
            this.Validators = validators;
            this.RefValuesCode = refValuesCode;
        }
        
        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name="dataType", EmitDefaultValue=false)]
        public DataTypeEnum DataType { get; set; }

        /// <summary>
        /// Gets or Sets FieldName
        /// </summary>
        [DataMember(Name="fieldName", EmitDefaultValue=false)]
        public string FieldName { get; set; }

        /// <summary>
        /// Gets or Sets FieldGroup
        /// </summary>
        [DataMember(Name="fieldGroup", EmitDefaultValue=false)]
        public string FieldGroup { get; set; }

        /// <summary>
        /// Gets or Sets FieldOrder
        /// </summary>
        [DataMember(Name="fieldOrder", EmitDefaultValue=false)]
        public string FieldOrder { get; set; }

        /// <summary>
        /// Gets or Sets FieldLabel
        /// </summary>
        [DataMember(Name="fieldLabel", EmitDefaultValue=false)]
        public string FieldLabel { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Validators
        /// </summary>
        [DataMember(Name="validators", EmitDefaultValue=false)]
        public List<FieldValidator> Validators { get; set; }

        /// <summary>
        /// Gets or Sets RefValuesCode
        /// </summary>
        [DataMember(Name="refValuesCode", EmitDefaultValue=false)]
        public string RefValuesCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldMetaData {\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  FieldGroup: ").Append(FieldGroup).Append("\n");
            sb.Append("  FieldOrder: ").Append(FieldOrder).Append("\n");
            sb.Append("  FieldLabel: ").Append(FieldLabel).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Validators: ").Append(Validators).Append("\n");
            sb.Append("  RefValuesCode: ").Append(RefValuesCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldMetaData);
        }

        /// <summary>
        /// Returns true if FieldMetaData instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldMetaData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldMetaData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.FieldGroup == input.FieldGroup ||
                    (this.FieldGroup != null &&
                    this.FieldGroup.Equals(input.FieldGroup))
                ) && 
                (
                    this.FieldOrder == input.FieldOrder ||
                    (this.FieldOrder != null &&
                    this.FieldOrder.Equals(input.FieldOrder))
                ) && 
                (
                    this.FieldLabel == input.FieldLabel ||
                    (this.FieldLabel != null &&
                    this.FieldLabel.Equals(input.FieldLabel))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Validators == input.Validators ||
                    this.Validators != null &&
                    input.Validators != null &&
                    this.Validators.SequenceEqual(input.Validators)
                ) && 
                (
                    this.RefValuesCode == input.RefValuesCode ||
                    (this.RefValuesCode != null &&
                    this.RefValuesCode.Equals(input.RefValuesCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.FieldGroup != null)
                    hashCode = hashCode * 59 + this.FieldGroup.GetHashCode();
                if (this.FieldOrder != null)
                    hashCode = hashCode * 59 + this.FieldOrder.GetHashCode();
                if (this.FieldLabel != null)
                    hashCode = hashCode * 59 + this.FieldLabel.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Validators != null)
                    hashCode = hashCode * 59 + this.Validators.GetHashCode();
                if (this.RefValuesCode != null)
                    hashCode = hashCode * 59 + this.RefValuesCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
