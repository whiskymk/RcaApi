/* 
 * ParameterizationStore
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ParameterizationStore.Client.Client.SwaggerDateConverter;

namespace ParameterizationStore.Client.Model
{
    /// <summary>
    /// StateDto
    /// </summary>
    [DataContract]
        public partial class StateDto :  IEquatable<StateDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StateDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="startPoint">startPoint.</param>
        /// <param name="endPoint">endPoint.</param>
        /// <param name="enterActions">enterActions.</param>
        /// <param name="exitActions">exitActions.</param>
        public StateDto(string id = default(string), bool? startPoint = default(bool?), bool? endPoint = default(bool?), List<SmActionDto> enterActions = default(List<SmActionDto>), List<SmActionDto> exitActions = default(List<SmActionDto>))
        {
            this.Id = id;
            this.StartPoint = startPoint;
            this.EndPoint = endPoint;
            this.EnterActions = enterActions;
            this.ExitActions = exitActions;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets StartPoint
        /// </summary>
        [DataMember(Name="startPoint", EmitDefaultValue=false)]
        public bool? StartPoint { get; set; }

        /// <summary>
        /// Gets or Sets EndPoint
        /// </summary>
        [DataMember(Name="endPoint", EmitDefaultValue=false)]
        public bool? EndPoint { get; set; }

        /// <summary>
        /// Gets or Sets EnterActions
        /// </summary>
        [DataMember(Name="enterActions", EmitDefaultValue=false)]
        public List<SmActionDto> EnterActions { get; set; }

        /// <summary>
        /// Gets or Sets ExitActions
        /// </summary>
        [DataMember(Name="exitActions", EmitDefaultValue=false)]
        public List<SmActionDto> ExitActions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StateDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartPoint: ").Append(StartPoint).Append("\n");
            sb.Append("  EndPoint: ").Append(EndPoint).Append("\n");
            sb.Append("  EnterActions: ").Append(EnterActions).Append("\n");
            sb.Append("  ExitActions: ").Append(ExitActions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StateDto);
        }

        /// <summary>
        /// Returns true if StateDto instances are equal
        /// </summary>
        /// <param name="input">Instance of StateDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StateDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StartPoint == input.StartPoint ||
                    (this.StartPoint != null &&
                    this.StartPoint.Equals(input.StartPoint))
                ) && 
                (
                    this.EndPoint == input.EndPoint ||
                    (this.EndPoint != null &&
                    this.EndPoint.Equals(input.EndPoint))
                ) && 
                (
                    this.EnterActions == input.EnterActions ||
                    this.EnterActions != null &&
                    input.EnterActions != null &&
                    this.EnterActions.SequenceEqual(input.EnterActions)
                ) && 
                (
                    this.ExitActions == input.ExitActions ||
                    this.ExitActions != null &&
                    input.ExitActions != null &&
                    this.ExitActions.SequenceEqual(input.ExitActions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StartPoint != null)
                    hashCode = hashCode * 59 + this.StartPoint.GetHashCode();
                if (this.EndPoint != null)
                    hashCode = hashCode * 59 + this.EndPoint.GetHashCode();
                if (this.EnterActions != null)
                    hashCode = hashCode * 59 + this.EnterActions.GetHashCode();
                if (this.ExitActions != null)
                    hashCode = hashCode * 59 + this.ExitActions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
