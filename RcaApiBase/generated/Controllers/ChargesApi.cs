/*
 * Reports, certificates and applications API
 *
 * This is API for part of the customer portal, Reports, certificates and applications
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Quipu.RcaApiBase.OpenApi.Attributes;
using Microsoft.AspNetCore.Authorization;
using Quipu.RcaApiBase.OpenApi.Models;
using RcaApiBase.Model.CRUD.CQRSQueries;
using RcaApiBase.Model.CRUD;
using RcaApiBase.Config;
using RcaApiBase.Model.Map;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System.IO;
using RcaApi.Domain.CQRS;
using RcaApiBase;
using Serilog;

namespace Quipu.RcaApiBase.OpenApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ChargesApiController : ControllerBase
    {
        /// <summary>
        /// Gets list of possible accounts to charge
        /// </summary>
        /// <param name="clientRef"></param>
        /// <response code="200">Client accounts</response>
        /// <response code="500">Server Error</response>
        [HttpGet]
        [Route("/Quipu-GmbH/RCAApi/1.0.1/Charges/Accounts/{clientRef}")]
        [ValidateModelState]
        [SwaggerOperation("ChargesAccountsClientRefGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ClientAccountInfo>), description: "Client accounts")]
        public virtual IActionResult ChargesAccountsClientRefGet([FromRoute][Required] string clientRef)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ClientAccountInfo>));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "[ {\n  \"accountInfo\" : \"accountInfo\",\n  \"accNumber\" : \"accNumber\",\n  \"currency\" : \"currency\"\n}, {\n  \"accountInfo\" : \"accountInfo\",\n  \"accNumber\" : \"accNumber\",\n  \"currency\" : \"currency\"\n} ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ClientAccountInfo>>(exampleJson)
            : default(List<ClientAccountInfo>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets charges for certain item code
        /// </summary>
        /// <param name="itemCode"></param>
        /// <response code="200">Charges</response>
        /// <response code="500">Server Error</response>
        [HttpGet]
        [Route("/Quipu-GmbH/RCAApi/1.0.1/Charges/{itemCode}")]
        [ValidateModelState]
        [SwaggerOperation("ChargesItemCodeGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Charge>), description: "Charges")]
        public virtual IActionResult ChargesItemCodeGet([FromRoute][Required] string itemCode)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Charge>));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "[ {\n  \"amount\" : 0.8008281904610115,\n  \"code\" : \"code\",\n  \"currency\" : \"currency\"\n}, {\n  \"amount\" : 0.8008281904610115,\n  \"code\" : \"code\",\n  \"currency\" : \"currency\"\n} ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Charge>>(exampleJson)
            : default(List<Charge>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
