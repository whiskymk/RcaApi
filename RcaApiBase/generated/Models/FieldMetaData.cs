/*
 * Reports, certificates and applications API
 *
 * This is API for part of the customer portal, Reports, certificates and applications
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Quipu.RcaApiBase.OpenApi.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FieldMetaData : IEquatable<FieldMetaData>
    {
        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DataTypeEnum
        {
            /// <summary>
            /// Enum IntEnum for int
            /// </summary>
            [EnumMember(Value = "int")]
            IntEnum = 0,
            /// <summary>
            /// Enum MoneyEnum for money
            /// </summary>
            [EnumMember(Value = "money")]
            MoneyEnum = 1,
            /// <summary>
            /// Enum StringEnum for string
            /// </summary>
            [EnumMember(Value = "string")]
            StringEnum = 2,
            /// <summary>
            /// Enum DateEnum for date
            /// </summary>
            [EnumMember(Value = "date")]
            DateEnum = 3,
            /// <summary>
            /// Enum BinaryEnum for binary
            /// </summary>
            [EnumMember(Value = "binary")]
            BinaryEnum = 4
        }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [Required]

        [DataMember(Name = "dataType")]
        public DataTypeEnum? DataType { get; set; }

        /// <summary>
        /// Gets or Sets FieldName
        /// </summary>
        [Required]

        [DataMember(Name = "fieldName")]
        public string FieldName { get; set; }

        /// <summary>
        /// to have possibility of grouping on UI side
        /// </summary>
        /// <value>to have possibility of grouping on UI side</value>

        [DataMember(Name = "fieldGroup")]
        public string FieldGroup { get; set; }

        /// <summary>
        /// Gets or Sets FieldOrder
        /// </summary>

        [DataMember(Name = "fieldOrder")]
        public string FieldOrder { get; set; }

        /// <summary>
        /// label to be shown next to field control, can be used as localization markup
        /// </summary>
        /// <value>label to be shown next to field control, can be used as localization markup</value>

        [DataMember(Name = "fieldLabel")]
        public string FieldLabel { get; set; }

        /// <summary>
        /// list of additional string tags to describe special behaviour, in case of need
        /// </summary>
        /// <value>list of additional string tags to describe special behaviour, in case of need</value>

        [DataMember(Name = "tags")]
        public List<Tag> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [Required]

        [DataMember(Name = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Validators
        /// </summary>

        [DataMember(Name = "validators")]
        public List<FieldValidator> Validators { get; set; }

        /// <summary>
        /// Code to get list of reference values for combobox
        /// </summary>
        /// <value>Code to get list of reference values for combobox</value>

        [DataMember(Name = "refValuesCode")]
        public string RefValuesCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldMetaData {\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  FieldGroup: ").Append(FieldGroup).Append("\n");
            sb.Append("  FieldOrder: ").Append(FieldOrder).Append("\n");
            sb.Append("  FieldLabel: ").Append(FieldLabel).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Validators: ").Append(Validators).Append("\n");
            sb.Append("  RefValuesCode: ").Append(RefValuesCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FieldMetaData)obj);
        }

        /// <summary>
        /// Returns true if FieldMetaData instances are equal
        /// </summary>
        /// <param name="other">Instance of FieldMetaData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldMetaData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    DataType == other.DataType ||
                    DataType != null &&
                    DataType.Equals(other.DataType)
                ) &&
                (
                    FieldName == other.FieldName ||
                    FieldName != null &&
                    FieldName.Equals(other.FieldName)
                ) &&
                (
                    FieldGroup == other.FieldGroup ||
                    FieldGroup != null &&
                    FieldGroup.Equals(other.FieldGroup)
                ) &&
                (
                    FieldOrder == other.FieldOrder ||
                    FieldOrder != null &&
                    FieldOrder.Equals(other.FieldOrder)
                ) &&
                (
                    FieldLabel == other.FieldLabel ||
                    FieldLabel != null &&
                    FieldLabel.Equals(other.FieldLabel)
                ) &&
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) &&
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) &&
                (
                    Validators == other.Validators ||
                    Validators != null &&
                    Validators.SequenceEqual(other.Validators)
                ) &&
                (
                    RefValuesCode == other.RefValuesCode ||
                    RefValuesCode != null &&
                    RefValuesCode.Equals(other.RefValuesCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (DataType != null)
                    hashCode = hashCode * 59 + DataType.GetHashCode();
                if (FieldName != null)
                    hashCode = hashCode * 59 + FieldName.GetHashCode();
                if (FieldGroup != null)
                    hashCode = hashCode * 59 + FieldGroup.GetHashCode();
                if (FieldOrder != null)
                    hashCode = hashCode * 59 + FieldOrder.GetHashCode();
                if (FieldLabel != null)
                    hashCode = hashCode * 59 + FieldLabel.GetHashCode();
                if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                if (Validators != null)
                    hashCode = hashCode * 59 + Validators.GetHashCode();
                if (RefValuesCode != null)
                    hashCode = hashCode * 59 + RefValuesCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(FieldMetaData left, FieldMetaData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FieldMetaData left, FieldMetaData right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
