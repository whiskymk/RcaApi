/*
 * Reports, certificates and applications API
 *
 * This is API for part of the customer portal, Reports, certificates and applications
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Quipu.RcaApiBase.OpenApi.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ModelCase : IEquatable<ModelCase>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>

        [DataMember(Name = "created")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>

        [DataMember(Name = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets FieldsData
        /// </summary>

        [DataMember(Name = "fieldsData")]
        public Object FieldsData { get; set; }

        /// <summary>
        /// Gets or Sets CaseType
        /// </summary>

        [DataMember(Name = "caseType")]
        public string CaseType { get; set; }

        /// <summary>
        /// Gets or Sets InternalStatus
        /// </summary>

        [DataMember(Name = "internalStatus")]
        public string InternalStatus { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>

        [DataMember(Name = "owner")]
        public string Owner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelCase {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  FieldsData: ").Append(FieldsData).Append("\n");
            sb.Append("  CaseType: ").Append(CaseType).Append("\n");
            sb.Append("  InternalStatus: ").Append(InternalStatus).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ModelCase)obj);
        }

        /// <summary>
        /// Returns true if ModelCase instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelCase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelCase other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) &&
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) &&
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) &&
                (
                    FieldsData == other.FieldsData ||
                    FieldsData != null &&
                    FieldsData.Equals(other.FieldsData)
                ) &&
                (
                    CaseType == other.CaseType ||
                    CaseType != null &&
                    CaseType.Equals(other.CaseType)
                ) &&
                (
                    InternalStatus == other.InternalStatus ||
                    InternalStatus != null &&
                    InternalStatus.Equals(other.InternalStatus)
                ) &&
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                if (FieldsData != null)
                    hashCode = hashCode * 59 + FieldsData.GetHashCode();
                if (CaseType != null)
                    hashCode = hashCode * 59 + CaseType.GetHashCode();
                if (InternalStatus != null)
                    hashCode = hashCode * 59 + InternalStatus.GetHashCode();
                if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ModelCase left, ModelCase right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ModelCase left, ModelCase right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
