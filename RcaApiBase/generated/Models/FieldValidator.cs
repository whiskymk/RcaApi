/*
 * Reports, certificates and applications API
 *
 * This is API for part of the customer portal, Reports, certificates and applications
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Quipu.RcaApiBase.OpenApi.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FieldValidator : IEquatable<FieldValidator>
    {
        /// <summary>
        /// code in some dynamic progrmming language - Python, JavaScript etc.
        /// </summary>
        /// <value>code in some dynamic progrmming language - Python, JavaScript etc.</value>
        [Required]

        [DataMember(Name = "validatorText")]
        public string ValidatorText { get; set; }

        /// <summary>
        /// Gets or Sets ValidatorEngine
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ValidatorEngineEnum
        {
            /// <summary>
            /// Enum PythonEnum for Python
            /// </summary>
            [EnumMember(Value = "Python")]
            PythonEnum = 0,
            /// <summary>
            /// Enum JavaScriptEnum for JavaScript
            /// </summary>
            [EnumMember(Value = "JavaScript")]
            JavaScriptEnum = 1
        }

        /// <summary>
        /// Gets or Sets ValidatorEngine
        /// </summary>

        [DataMember(Name = "validatorEngine")]
        public ValidatorEngineEnum? ValidatorEngine { get; set; }

        /// <summary>
        /// Gets or Sets ValidatorType
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ValidatorTypeEnum
        {
            /// <summary>
            /// Enum WarningEnum for Warning
            /// </summary>
            [EnumMember(Value = "Warning")]
            WarningEnum = 0,
            /// <summary>
            /// Enum ErrorEnum for Error
            /// </summary>
            [EnumMember(Value = "Error")]
            ErrorEnum = 1
        }

        /// <summary>
        /// Gets or Sets ValidatorType
        /// </summary>
        [Required]

        [DataMember(Name = "validatorType")]
        public ValidatorTypeEnum? ValidatorType { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>

        [DataMember(Name = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [Required]

        [DataMember(Name = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldValidator {\n");
            sb.Append("  ValidatorText: ").Append(ValidatorText).Append("\n");
            sb.Append("  ValidatorEngine: ").Append(ValidatorEngine).Append("\n");
            sb.Append("  ValidatorType: ").Append(ValidatorType).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FieldValidator)obj);
        }

        /// <summary>
        /// Returns true if FieldValidator instances are equal
        /// </summary>
        /// <param name="other">Instance of FieldValidator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldValidator other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    ValidatorText == other.ValidatorText ||
                    ValidatorText != null &&
                    ValidatorText.Equals(other.ValidatorText)
                ) &&
                (
                    ValidatorEngine == other.ValidatorEngine ||
                    ValidatorEngine != null &&
                    ValidatorEngine.Equals(other.ValidatorEngine)
                ) &&
                (
                    ValidatorType == other.ValidatorType ||
                    ValidatorType != null &&
                    ValidatorType.Equals(other.ValidatorType)
                ) &&
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) &&
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (ValidatorText != null)
                    hashCode = hashCode * 59 + ValidatorText.GetHashCode();
                if (ValidatorEngine != null)
                    hashCode = hashCode * 59 + ValidatorEngine.GetHashCode();
                if (ValidatorType != null)
                    hashCode = hashCode * 59 + ValidatorType.GetHashCode();
                if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(FieldValidator left, FieldValidator right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FieldValidator left, FieldValidator right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
